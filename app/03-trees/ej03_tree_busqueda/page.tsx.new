'use client';

import IntroPythonXom from '@/components/IntroPythonXom';
import type { ExerciseData } from '@/types/types';

const treeBusquedaExerciseData: ExerciseData = {
  id: 'ej03_tree_busqueda',
  title: 'Búsqueda en Árbol',
  description: `# Búsqueda en Árbol Binario

Implementa una función para buscar elementos en un árbol binario de búsqueda (BST).

## Instrucciones

1. Implementa la función \`search(root, value)\` que busque un valor en el árbol
2. La función debe devolver \`True\` si el valor está presente, \`False\` en caso contrario
3. Aprovecha la propiedad del BST: valores menores a la izquierda, mayores a la derecha

## Ejemplo

\`\`\`python
# Crear un árbol binario de búsqueda
root = TreeNode(10)
root.left = TreeNode(5)
root.right = TreeNode(15)

# Buscar valores
print(search(root, 5))  # True
print(search(root, 7))  # False
\`\`\``,  
  starterCode: `class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def search(root, value):
    """
    Busca un valor en un árbol binario de búsqueda
    
    Args:
        root: Nodo raíz del árbol
        value: Valor a buscar
        
    Returns:
        bool: True si el valor existe, False si no
    """
    # Implementa la función de búsqueda aquí
    pass
`,
  tests: [    
    { 
      name: "Test búsqueda - elemento presente", 
      input: "root = TreeNode(10); root.left = TreeNode(5); root.right = TreeNode(15); root.left.left = TreeNode(3); root.right.left = TreeNode(12); search(root, 12)", 
      expected: "True", 
      points: 2, 
      feedback: "La función debe encontrar correctamente un elemento presente en el árbol." 
    },    
    { 
      name: "Test búsqueda - elemento ausente", 
      input: "root = TreeNode(10); root.left = TreeNode(5); root.right = TreeNode(15); root.left.left = TreeNode(3); root.right.left = TreeNode(12); search(root, 7)", 
      expected: "False", 
      points: 2, 
      feedback: "La función debe retornar False cuando el elemento no está en el árbol." 
    },    
    { 
      name: "Test búsqueda - árbol vacío", 
      input: "search(None, 5)", 
      expected: "False", 
      points: 1, 
      feedback: "La función debe manejar correctamente un árbol vacío." 
    }
  ],
  hints: [
    { id: 'h1', text: "Usa recursión para recorrer el árbol" },
    { id: 'h2', text: "Compara el valor buscado con el valor del nodo actual para decidir qué ruta seguir" },
    { id: 'h3', text: "Recuerda manejar el caso base: nodo vacío (None)" }
  ],
  maxPoints: 10,
  globalTimeoutMs: 5000,
  efficiencyFeedback: 'Usa recursión para aprovechar la estructura del árbol.',
  styleFeedback: 'Escribe código claro y bien documentado.',
  suggestions: ['¿Verificas el caso de árbol vacío?', '¿Aprovechas la propiedad BST para buscar más eficientemente?'],
  bestPractices: ['Maneja los casos base explícitamente', 'Aprovecha la estructura ordenada del BST']
};

export default function TreeBusquedaPage() {
  return <IntroPythonXom data={treeBusquedaExerciseData} />;
}
