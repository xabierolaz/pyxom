// Ejercicio maestro: Validaci√≥n completa de BST - Todos los errores comunes
import IntroPythonXom from '@/components/IntroPythonXom';

const treeValidationExercise = {
  id: 'ej08_tree_validacion',
  title: 'Validaci√≥n BST Completa - Ejercicio Maestro',
  description: `En este ejercicio maestro, implementar√°s una validaci√≥n completa de BST que aborda TODOS los errores m√°s comunes de √°rboles.

### Instrucciones:
1. Implementa una funci√≥n \`es_bst_valido\` que determine si un √°rbol es un BST v√°lido.
2. La funci√≥n debe verificar que TODOS los nodos cumplan la propiedad BST.
3. Maneja correctamente todos los casos edge: nodos None, un solo nodo, etc.
4. Implementa validaci√≥n GLOBAL, no solo local.

### ‚ö†Ô∏è TODOS los Errores Comunes Cubiertos:
1. **Acceso a nodos None**: Validar antes de acceder a atributos
2. **Casos base incorrectos**: Manejar nodos None y √°rboles vac√≠os
3. **Falta de return**: SIEMPRE retornar boolean
4. **Validaci√≥n solo local**: Verificar propiedades BST globalmente
5. **L√≥gica BST incorrecta**: Comparaciones < y > correctas
6. **B√∫squeda incompleta**: Verificar TODOS los nodos
7. **Parsing de entrada**: Manejar input malformado
8. **Validaci√≥n inadecuada**: No asumir entrada v√°lida

### Ejemplo de BST v√°lido:
\`\`\`
    10
   /  \\
  5    15
 / \\   / \\
3   7 12  18
\`\`\`

### Ejemplo de BST inv√°lido:
\`\`\`
    10
   /  \\
  5    15
 / \\   / \\
3   7 12  8  ‚Üê ERROR: 8 < 10 pero est√° en sub√°rbol derecho
\`\`\`

### üîç Concepto Clave - Validaci√≥n Global vs Local:
- **Local**: Solo comparar con padre inmediato (INCORRECTO)
- **Global**: Verificar que TODOS los valores en sub√°rbol izq < nodo < TODOS en sub√°rbol der (CORRECTO)

### Recursos Adicionales:
- [Validaci√≥n de BST](https://en.wikipedia.org/wiki/Binary_search_tree#Verification)`,
  starterCode: `class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izq = None
        self.der = None

def es_bst_valido(nodo, min_val=float('-inf'), max_val=float('inf')):
    """
    ‚ö†Ô∏è VALIDACI√ìN GLOBAL BST - Evita TODOS los errores comunes
    
    Args:
        nodo: Nodo actual a validar
        min_val: Valor m√≠nimo permitido (para validaci√≥n global)
        max_val: Valor m√°ximo permitido (para validaci√≥n global)
    
    Returns:
        bool: True si es BST v√°lido, False en caso contrario
    """
    # ‚ö†Ô∏è ERROR #1 y #2: Verificar nodo None (caso base)
    if nodo is None:
        return True
    
    # ‚ö†Ô∏è ERROR #4 y #5: Validaci√≥n GLOBAL BST
    # No solo comparar con padre, sino con TODOS los ancestros
    if nodo.valor <= min_val or nodo.valor >= max_val:
        return False
    
    # ‚ö†Ô∏è ERROR #3 y #6: SIEMPRE retornar boolean y verificar AMBOS sub√°rboles
    # Sub√°rbol izquierdo: todos los valores deben ser < nodo.valor
    izq_valido = es_bst_valido(nodo.izq, min_val, nodo.valor)
    
    # Sub√°rbol derecho: todos los valores deben ser > nodo.valor
    der_valido = es_bst_valido(nodo.der, nodo.valor, max_val)
    
    # ‚ö†Ô∏è ERROR #3: SIEMPRE retornar resultado
    return izq_valido and der_valido

def validar_entrada_y_construir(entrada_str):
    """
    ‚ö†Ô∏è ERROR #7 y #8: Parsing y validaci√≥n de entrada
    """
    try:
        # ‚ö†Ô∏è ERROR #7: Limpiar entrada con .strip()
        entrada_limpia = entrada_str.strip()
        
        if not entrada_limpia:
            return None
        
        # ‚ö†Ô∏è ERROR #8: Validar formato de entrada
        valores = entrada_limpia.split()
        numeros = []
        
        for val in valores:
            try:
                num = int(val.strip())
                numeros.append(num)
            except ValueError:
                # ‚ö†Ô∏è ERROR #8: Manejar valores inv√°lidos
                print(f"Advertencia: '{val}' no es un n√∫mero v√°lido")
                continue
        
        return numeros
        
    except Exception as e:
        # ‚ö†Ô∏è ERROR #7: Manejar errores de parsing
        print(f"Error al procesar entrada: {e}")
        return None

def construir_arbol_desde_lista(valores):
    """Construir BST desde lista de valores"""
    if not valores:
        return None
    
    raiz = None
    for valor in valores:
        raiz = insertar_bst(raiz, valor)
    return raiz

def insertar_bst(nodo, valor):
    if nodo is None:
        return Nodo(valor)
    if valor < nodo.valor:
        nodo.izq = insertar_bst(nodo.izq, valor)
    elif valor > nodo.valor:
        nodo.der = insertar_bst(nodo.der, valor)
    return nodo

# Ejemplo de uso completo:
# entrada = "10 5 15 3 7 12 18"
# valores = validar_entrada_y_construir(entrada)
# if valores:
#     arbol = construir_arbol_desde_lista(valores)
#     print(f"¬øEs BST v√°lido? {es_bst_valido(arbol)}")`,
  tests: [
    { name: 'BST v√°lido simple', input: '', expected: 'True', points: 3, feedback: 'ERROR #1-6: Debe validar correctamente un BST simple sin errores de acceso a None.' },
    { name: 'BST inv√°lido (violaci√≥n global)', input: '', expected: 'False', points: 4, feedback: 'ERROR #4: Debe detectar violaciones GLOBALES de BST, no solo locales.' },
    { name: '√Årbol vac√≠o (None)', input: '', expected: 'True', points: 2, feedback: 'ERROR #2: Un √°rbol vac√≠o es t√©cnicamente un BST v√°lido.' },
    { name: 'Un solo nodo', input: '', expected: 'True', points: 2, feedback: 'ERROR #2: Un solo nodo siempre es BST v√°lido.' },
    { name: 'Validaci√≥n con duplicados', input: '', expected: 'False', points: 3, feedback: 'ERROR #5: BST no debe permitir valores duplicados en implementaci√≥n estricta.' },
    { name: 'Entrada malformada', input: '', expected: 'Error', points: 2, feedback: 'ERROR #7-8: Debe manejar entrada malformada con .strip() y validaci√≥n.' },
    { name: 'L√≥gica BST correcta', input: '', expected: 'True', points: 3, feedback: 'ERROR #5: Debe usar comparaciones < y > correctas para BST.' },
    { name: 'B√∫squeda completa', input: '', expected: 'False', points: 3, feedback: 'ERROR #6: Debe verificar TODOS los nodos, no solo algunos.' }
  ],
  hints: [
    { id: 'h1', text: 'üö® ERROR #1: NUNCA accedas a nodo.valor sin "if nodo is None" primero' },
    { id: 'h2', text: 'üö® ERROR #2: Casos base: nodo None retorna True (√°rbol vac√≠o es BST v√°lido)' },
    { id: 'h3', text: 'üö® ERROR #3: SIEMPRE retorna boolean (True/False) en funciones de validaci√≥n' },
    { id: 'h4', text: 'üö® ERROR #4: Validaci√≥n GLOBAL: usa min_val y max_val para verificar TODOS los ancestros' },
    { id: 'h5', text: 'üö® ERROR #5: L√≥gica BST: izq < nodo < der PARA TODOS los nodos' },
    { id: 'h6', text: 'üö® ERROR #6: Verifica AMBOS sub√°rboles: izq_valido AND der_valido' },
    { id: 'h7', text: 'üö® ERROR #7: Usa .strip() al procesar entrada de strings' },
    { id: 'h8', text: 'üö® ERROR #8: Valida entrada - no asumas que est√° bien formateada' }
  ],
  efficiencyFeedback: 'La validaci√≥n debe ser O(n) visitando cada nodo una vez. Evita recalcular rangos innecesariamente.',
  styleFeedback: 'Sigue PEP8: funciones descriptivas, manejo de excepciones, docstrings claros.',
  suggestions: [
    'üîç ¬øUsas par√°metros min_val y max_val para validaci√≥n global?',
    'üîç ¬øVerificas "if nodo is None: return True" como caso base?',
    'üîç ¬øTu funci√≥n SIEMPRE retorna True o False?',
    'üîç ¬øValidas AMBOS sub√°rboles con AND l√≥gico?',
    'üîç ¬øUsas .strip() al procesar entrada de strings?',
    'üîç ¬øManejas excepciones en parsing de entrada?',
    'üîç ¬øTu validaci√≥n detecta violaciones globales de BST?'
  ],
  bestPractices: [
    '‚úÖ SIEMPRE valida nodos None antes de acceso a atributos',
    '‚úÖ Usa validaci√≥n GLOBAL con rangos min/max, no solo local',
    '‚úÖ SIEMPRE retorna boolean en funciones de validaci√≥n',
    '‚úÖ Verifica TODOS los nodos del √°rbol, no solo algunos',
    '‚úÖ Usa .strip() y validaci√≥n robusta para entrada',
    '‚úÖ Maneja casos edge: √°rbol vac√≠o, un nodo, duplicados',
    '‚úÖ Incluye docstrings que expliquen validaci√≥n global vs local',
    '‚úÖ Considera complejidad temporal O(n) para validaci√≥n completa'
  ]
};

export default function Page() {
  return <IntroPythonXom data={treeValidationExercise} />;
}
