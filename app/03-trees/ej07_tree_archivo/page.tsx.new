'use client';

import IntroPythonXom from '@/components/IntroPythonXom';
import type { ExerciseData } from '@/types/types';

const exerciseData: ExerciseData = {
  id: 'ej07_tree_archivo',
  title: "Sistema de Archivos con Árboles",
  description: `# Sistema de Archivos Simulado con Árboles

Simula un sistema de archivos básico usando una estructura de árbol.

## Especificaciones

1.  **Clase `FileNode`**: Representa un archivo o directorio.
    *   Propiedades: `name`, `is_directory`, `children` (diccionario si es directorio, `None` si es archivo), `size` (para archivos).
2.  **Clase `FileSystem`**: Gestiona el sistema completo.
    *   Método `create_file(path, size)`: Crea un archivo en la ruta especificada.
    *   Método `create_directory(path)`: Crea un directorio en la ruta especificada.
    *   Método `get_total_size(path)`: Calcula el tamaño total de un archivo o directorio (recursivamente para directorios).

## Funcionalidades

*   Los directorios pueden contener archivos y otros directorios.
*   Los archivos tienen un tamaño específico.
*   Se pueden calcular tamaños totales recursivamente.

## Ejemplo de Estructura

\`\`\`
/
├── documents/
│   ├── file1.txt (100 bytes)
│   └── photos/
│       └── image.jpg (2000 bytes)
└── music/
    └── song.mp3 (5000 bytes)
\`\`\``,
  starterCode: `class FileNode:
    def __init__(self, name, is_directory=False, size=0):
        self.name = name
        self.is_directory = is_directory
        self.size = size
        self.children = {} if is_directory else None

class FileSystem:
    def __init__(self):
        self.root = FileNode("/", is_directory=True)
    
    def _find_node(self, path_parts):
        """Método auxiliar para encontrar un nodo dada una lista de partes de la ruta."""
        current = self.root
        for part in path_parts:
            if not current.is_directory or part not in current.children:
                return None
            current = current.children[part]
        return current

    def create_file(self, path: str, size: int):
        """
        Crea un archivo en la ruta especificada.
        
        Args:
            path (str): La ruta completa del archivo (ej: /docs/file.txt)
            size (int): El tamaño del archivo en bytes
        Returns:
            bool: True si se creó, False si la ruta padre no existe o el nombre ya existe.
        """
        # Implementa la creación de archivos
        pass
    
    def create_directory(self, path: str):
        """
        Crea un directorio en la ruta especificada.
        
        Args:
            path (str): La ruta completa del directorio (ej: /docs/images)
        Returns:
            bool: True si se creó, False si la ruta padre no existe o el nombre ya existe.
        """
        # Implementa la creación de directorios
        pass
    
    def get_total_size(self, path: str) -> int:
        """
        Calcula el tamaño total de un archivo o directorio.
        
        Args:
            path (str): La ruta del archivo o directorio
        
        Returns:
            int: El tamaño total en bytes (incluyendo subdirectorios), o -1 si la ruta no existe.
        """
        # Implementa el cálculo de tamaño total
        pass
`,
  tests: [
    {
      name: "Test Crear Directorio Raíz",
      input: "fs = FileSystem(); fs.create_directory('/docs'); fs.root.children['docs'].name",
      expected: "'docs'",
      points: 1,
      feedback: "Debe ser posible crear un directorio en la raíz."
    },
    {
      name: "Test Crear Archivo en Directorio",
      input: "fs = FileSystem(); fs.create_directory('/docs'); fs.create_file('/docs/file1.txt', 100); fs.root.children['docs'].children['file1.txt'].size",
      expected: "100",
      points: 2,
      feedback: "Debe ser posible crear un archivo dentro de un directorio existente."
    },
    {
      name: "Test Tamaño de Archivo",
      input: "fs = FileSystem(); fs.create_directory('/docs'); fs.create_file('/docs/file1.txt', 150); fs.get_total_size('/docs/file1.txt')",
      expected: "150",
      points: 1,
      feedback: "get_total_size debe devolver el tamaño correcto para un archivo."
    },
    {
      name: "Test Tamaño de Directorio",
      input: "fs = FileSystem(); fs.create_directory('/data'); fs.create_file('/data/a.txt', 50); fs.create_directory('/data/subdir'); fs.create_file('/data/subdir/b.txt', 200); fs.get_total_size('/data')",
      expected: "250",
      points: 3,
      feedback: "get_total_size debe sumar los tamaños de todos los archivos en un directorio y sus subdirectorios."
    },
    {
      name: "Test Ruta Inexistente",
      input: "fs = FileSystem(); fs.get_total_size('/nonexistent/file.txt')",
      expected: "-1",
      points: 1,
      feedback: "get_total_size debe devolver -1 para rutas que no existen."
    },
    {
      name: "Test Crear Archivo en Ruta Inexistente",
      input: "fs = FileSystem(); fs.create_file('/nonexistent_dir/file.txt', 10)",
      expected: "False",
      points: 1,
      feedback: "No se debe poder crear un archivo si el directorio padre no existe."
    },
    {
      name: "Test Crear Duplicado",
      input: "fs = FileSystem(); fs.create_directory('/folder'); fs.create_directory('/folder')",
      expected: "False",
      points: 1,
      feedback: "No se debe poder crear un directorio o archivo si ya existe uno con el mismo nombre en la misma ubicación."
    }
  ],
  hints: [
    {
      id: 'h1',
      text: "Usa un diccionario para almacenar los hijos de cada directorio. La clave puede ser el nombre del archivo/directorio y el valor el objeto FileNode."
    },
    {
      id: 'h2',
      text: "Para navegar por las rutas, puedes separar el string de la ruta usando `path.strip('/').split('/')`. Recuerda manejar el caso de la raíz ('/')."
    },
    {
      id: 'h3',
      text: "Para `get_total_size` en un directorio, usa recursión. Si es un archivo, devuelve su tamaño. Si es un directorio, suma los tamaños de sus hijos."
    },
    {
      id: 'h4',
      text: "En `create_file` y `create_directory`, primero navega hasta el directorio padre. Si no existe, no puedes crear el archivo/directorio."
    }
  ],
  maxPoints: 10,
  globalTimeoutMs: 5000,
  efficiencyFeedback: 'Enfócate en la navegación correcta de rutas y la lógica recursiva para el tamaño.',
  styleFeedback: 'Usa nombres descriptivos para archivos y directorios. Considera un método auxiliar para encontrar nodos basado en la ruta.',
  suggestions: [
    '¿Has implementado correctamente la navegación de rutas, incluyendo el manejo de la raíz y rutas vacías?',
    '¿Tu sistema maneja correctamente la creación de archivos y directorios en subdirectorios anidados?',
    '¿La función `get_total_size` es correctamente recursiva para los directorios?'
  ],
  bestPractices: [
    'Documenta la estructura de datos utilizada y la lógica de cada método.',
    'Maneja casos especiales como rutas inexistentes, intentos de crear duplicados, o crear un archivo en una ruta donde el directorio padre no existe.',
    'Considera un método privado como `_find_node(path_parts)` para ayudar a navegar y encontrar nodos.'
  ]
};

export default function TreeArchivoPage() {
  return <IntroPythonXom data={exerciseData} />;
}
