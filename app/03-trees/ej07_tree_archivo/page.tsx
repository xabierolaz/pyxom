// Ejercicio avanzado: √Årboles desde archivos - Prevenci√≥n de errores de parsing
import IntroPythonXom from '@/components/IntroPythonXom';

const treeFileExercise = {
  id: 'ej07_tree_archivo',
  title: '√Årboles desde Archivos - Parsing y Validaci√≥n Correctos',
  description: `En este ejercicio avanzado, aprender√°s a construir √°rboles BST desde archivos evitando los errores m√°s comunes de parsing y validaci√≥n.

### Instrucciones:
1. Lee valores desde un archivo de texto (un valor por l√≠nea).
2. Construye un √°rbol binario de b√∫squeda insertando los valores en orden.
3. Implementa validaci√≥n robusta para evitar errores de parsing.
4. Maneja correctamente archivos vac√≠os, valores inv√°lidos y errores de formato.

### ‚ö†Ô∏è Errores Comunes a Evitar:
1. **Parsing incorrecto**: NO olvides usar \`.strip()\` al leer l√≠neas de archivos
2. **NO acceder a nodos None**: Valida antes de acceder a \`.valor\`, \`.izq\`, \`.der\`
3. **Falta validaci√≥n**: Maneja valores no num√©ricos, l√≠neas vac√≠as, archivos inexistentes
4. **Return incorrecto**: SIEMPRE retorna el √°rbol construido o None si hay error

### Ejemplo de archivo (numeros.txt):
\`\`\`
10
5
15
3
7
12
18
\`\`\`

### Resultado esperado:
√Årbol BST construido correctamente con recorrido inorden: \`3 5 7 10 12 15 18\`

### üîç Consejos para Evitar Errores:
- **SIEMPRE** usa \`.strip()\` al leer l√≠neas de archivos
- **VALIDA** que cada l√≠nea sea un n√∫mero v√°lido antes de convertir
- **MANEJA** excepciones: FileNotFoundError, ValueError, etc.
- **NO ASUMAS** que el archivo est√° bien formateado

### Recursos Adicionales:
- [Manejo de archivos en Python](https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files)`,
  starterCode: `class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izq = None
        self.der = None

def insertar_bst(nodo, valor):
    if nodo is None:
        return Nodo(valor)
    if valor < nodo.valor:
        nodo.izq = insertar_bst(nodo.izq, valor)
    elif valor > nodo.valor:
        nodo.der = insertar_bst(nodo.der, valor)
    return nodo

def inorden(nodo):
    if nodo is not None:
        inorden(nodo.izq)
        print(nodo.valor, end=" ")
        inorden(nodo.der)

def construir_arbol_desde_archivo(nombre_archivo):
    """
    ‚ö†Ô∏è FUNCI√ìN PRINCIPAL - Evita los 8 errores m√°s comunes
    """
    raiz = None
    
    try:
        with open(nombre_archivo, 'r') as archivo:
            for linea in archivo:
                # ‚ö†Ô∏è ERROR #1: SIEMPRE usar .strip() al leer archivos
                linea_limpia = linea.strip()
                
                # ‚ö†Ô∏è ERROR #3: Validar l√≠neas vac√≠as
                if not linea_limpia:
                    continue
                
                try:
                    # ‚ö†Ô∏è ERROR #3: Validar que sea n√∫mero
                    valor = int(linea_limpia)
                    
                    # ‚ö†Ô∏è ERROR #2 y #4: Insertar con validaci√≥n BST
                    raiz = insertar_bst(raiz, valor)
                    
                except ValueError:
                    # ‚ö†Ô∏è ERROR #3: Manejar valores no num√©ricos
                    print(f"Advertencia: '{linea_limpia}' no es un n√∫mero v√°lido")
                    continue
                    
    except FileNotFoundError:
        # ‚ö†Ô∏è ERROR #3: Manejar archivo no encontrado
        print(f"Error: No se encontr√≥ el archivo '{nombre_archivo}'")
        return None
    except Exception as e:
        # ‚ö†Ô∏è ERROR #3: Manejar otros errores
        print(f"Error inesperado: {e}")
        return None
    
    # ‚ö†Ô∏è ERROR #4: SIEMPRE retornar el resultado
    return raiz

# Ejemplo de uso:
# raiz = construir_arbol_desde_archivo("numeros.txt")
# if raiz is not None:
#     print("√Årbol construido. Recorrido inorden:")
#     inorden(raiz)
# else:
#     print("No se pudo construir el √°rbol")`,
  tests: [
    { name: 'Archivo v√°lido', input: '', expected: '3 5 7 10 12 15 18', points: 4, feedback: 'ERROR COM√öN #1: Debe usar .strip() y construir BST correctamente desde archivo.' },
    { name: 'Archivo con espacios', input: '', expected: '1 2 3', points: 3, feedback: 'ERROR COM√öN #1: Debe limpiar espacios en blanco con .strip() al leer l√≠neas.' },
    { name: 'Archivo con valores inv√°lidos', input: '', expected: '5 10', points: 3, feedback: 'ERROR COM√öN #3: Debe validar y omitir valores no num√©ricos sin fallar.' },
    { name: 'Archivo inexistente', input: '', expected: 'None', points: 2, feedback: 'ERROR COM√öN #3: Debe manejar FileNotFoundError y retornar None.' },
    { name: 'Archivo vac√≠o', input: '', expected: 'None', points: 2, feedback: 'ERROR COM√öN #4: Debe retornar None para archivos vac√≠os.' },
    { name: 'Validaci√≥n BST', input: '', expected: 'True', points: 3, feedback: 'ERROR COM√öN #2: Debe mantener propiedades BST al insertar desde archivo.' }
  ],
  hints: [
    { id: 'h1', text: 'üö® ERROR #1: USA linea.strip() SIEMPRE al leer archivos - elimina \\n, espacios, etc.' },
    { id: 'h2', text: 'üö® ERROR #2: NO accedas a nodo.valor sin verificar que nodo no sea None' },
    { id: 'h3', text: 'üö® ERROR #3: MANEJA excepciones: FileNotFoundError, ValueError, l√≠neas vac√≠as' },
    { id: 'h4', text: 'üö® ERROR #4: SIEMPRE retorna el √°rbol construido o None si hay error' }
  ],
  efficiencyFeedback: 'La construcci√≥n debe ser O(n log n) para BST balanceado. Maneja archivos grandes eficientemente leyendo l√≠nea por l√≠nea.',
  styleFeedback: 'Sigue PEP8: maneja excepciones espec√≠ficas, usa nombres descriptivos, incluye docstrings.',
  suggestions: [
    'üîç ¬øUsas linea.strip() al leer cada l√≠nea del archivo?',
    'üîç ¬øManejas FileNotFoundError con try/except?',
    'üîç ¬øValidas que cada l√≠nea sea un n√∫mero con int()?',
    'üîç ¬øOmites l√≠neas vac√≠as o inv√°lidas sin fallar?',
    'üîç ¬øTu funci√≥n retorna None si no puede construir el √°rbol?',
    'üîç ¬øMantienes las propiedades BST al insertar?'
  ],
  bestPractices: [
    '‚úÖ SIEMPRE usa .strip() al leer l√≠neas de archivos',
    '‚úÖ Maneja excepciones espec√≠ficas: FileNotFoundError, ValueError',
    '‚úÖ Valida entrada antes de procesarla - no asumas formato correcto',
    '‚úÖ Omite datos inv√°lidos en vez de fallar completamente',
    '‚úÖ SIEMPRE retorna un valor consistente (√°rbol o None)',
    '‚úÖ Incluye mensajes de error informativos',
    '‚úÖ Lee archivos l√≠nea por l√≠nea para eficiencia de memoria',
    '‚úÖ Documenta el manejo de errores en docstrings'
  ]
};

export default function Page() {
  return <IntroPythonXom data={treeFileExercise} />;
}
