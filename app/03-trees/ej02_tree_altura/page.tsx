// Ejercicio de altura de √°rbol binario para el m√≥dulo Trees
import IntroPythonXom from '@/components/IntroPythonXom';

// Orden recomendado para el m√≥dulo √Årboles (Mooc):
// 1. ej01_tree_basico (Nodo y preorden)
// 2. ej05_tree_inorden (Inorden)
// 3. ej06_tree_postorden (Postorden)
// 4. ej02_tree_altura (Altura)
// 5. ej04_tree_insercion (Inserci√≥n BST)
// 6. ej03_tree_busqueda (B√∫squeda BST)

const treeHeightExercise = {
  id: 'ej02_tree_altura',
  title: 'Altura de √Årbol Binario - Validaci√≥n y Casos Base',
  description: `En este ejercicio, aprender√°s a calcular la altura de un √°rbol binario evitando errores comunes en recursi√≥n y validaci√≥n.

### Instrucciones:
1. Implementa una funci√≥n llamada \`altura\` que reciba el nodo ra√≠z de un √°rbol binario y devuelva su altura.
2. La altura de un √°rbol se define como el n√∫mero m√°ximo de niveles desde la ra√≠z hasta una hoja.
3. Usa recursi√≥n con casos base apropiados para calcular la altura.

### ‚ö†Ô∏è Errores Comunes a Evitar:
1. **NO accedas a atributos de nodos nulos**: Verifica \`if nodo is None\` antes de acceder a \`nodo.izq\` o \`nodo.der\`
2. **Caso base incorrecto**: Un √°rbol vac√≠o (None) debe retornar altura 0
3. **Falta el return**: SIEMPRE retorna un valor en funciones recursivas
4. **Validaci√≥n local**: No asumas que los sub√°rboles son v√°lidos, valida cada nivel

### Ejemplo:
Si tienes el siguiente √°rbol:
\`\`\`
    1
   / \\
  2   3
 / \\
4   5
\`\`\`
La altura del √°rbol es: \`3\`

### üîç Consejos para Evitar Errores:
- **SIEMPRE** retorna 0 para nodos None (caso base)
- **NUNCA** accedas a \`.izq\` o \`.der\` sin verificar que el nodo no sea None
- Usa \`max()\` para comparar alturas de sub√°rboles izquierdo y derecho
- **SIEMPRE** retorna un valor en cada rama de la funci√≥n

### Recursos Adicionales:
- [Documentaci√≥n sobre √°rboles binarios](https://en.wikipedia.org/wiki/Binary_tree)`,
  starterCode: `class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izq = None
        self.der = None

def altura(nodo):
    # ‚ö†Ô∏è ERROR COM√öN: NUNCA olvides el caso base
    if nodo is None:
        return 0
    
    # ‚ö†Ô∏è ERROR COM√öN: SIEMPRE retorna un valor
    # Calcula altura de sub√°rboles izquierdo y derecho
    altura_izq = altura(nodo.izq)
    altura_der = altura(nodo.der)
    
    # ‚ö†Ô∏è ERROR COM√öN: No olvides +1 para contar el nodo actual
    return 1 + max(altura_izq, altura_der)

# Ejemplo de uso:
# raiz = Nodo(1)
# raiz.izq = Nodo(2)
# raiz.der = Nodo(3)
# print(altura(raiz))  # Salida: 2`,
  tests: [
    { name: '√Årbol vac√≠o (None)', input: '', expected: '0', points: 3, feedback: 'ERROR COM√öN #2: La altura de un √°rbol vac√≠o (None) debe ser 0. Caso base fundamental.' },
    { name: 'Un solo nodo', input: '', expected: '1', points: 2, feedback: 'ERROR COM√öN #4: Un nodo aislado tiene altura 1, no 0.' },
    { name: '√Årbol desbalanceado', input: '', expected: '3', points: 3, feedback: 'ERROR COM√öN #3: Debe retornar correctamente la altura m√°xima entre sub√°rboles.' },
    { name: 'Validaci√≥n recursiva', input: '', expected: '4', points: 2, feedback: 'ERROR COM√öN #1: Debe validar cada nivel sin acceder a nodos None.' }
  ],
  hints: [
    { id: 'h1', text: 'üö® ERROR #2: El caso base debe ser "if nodo is None: return 0"' },
    { id: 'h2', text: 'üö® ERROR #3: SIEMPRE usa "return" en funciones que calculan valores' },
    { id: 'h3', text: 'üö® ERROR #1: NO accedas a nodo.izq o nodo.der sin verificar que nodo no sea None' },
    { id: 'h4', text: 'üö® ERROR #4: Usa max(altura(nodo.izq), altura(nodo.der)) + 1 para la altura total' }
  ],
  efficiencyFeedback: 'La soluci√≥n debe ser O(n) visitando cada nodo una sola vez. Evita recalcular alturas de sub√°rboles.',
  styleFeedback: 'Sigue PEP8: funciones en snake_case. Incluye docstrings que expliquen casos especiales como nodos None.',
  suggestions: [
    'üîç ¬øTu funci√≥n retorna 0 cuando nodo es None?',
    'üîç ¬øEst√°s usando max() para comparar las alturas de izq y der?',
    'üîç ¬øSumas +1 al m√°ximo para contar el nodo actual?',
    'üîç ¬øTu funci√≥n SIEMPRE retorna un entero?',
    'üîç ¬øManejas correctamente el caso de √°rbol vac√≠o?'
  ],
  bestPractices: [
    '‚úÖ SIEMPRE define casos base claros para funciones recursivas',
    '‚úÖ Valida inputs (nodos None) antes de procesarlos',
    '‚úÖ SIEMPRE retorna valores en funciones que realizan c√°lculos',
    '‚úÖ Usa max() para comparaciones num√©ricas claras',
    '‚úÖ Incluye docstrings que documenten el comportamiento con inputs None',
    '‚úÖ Evita assumptions sobre la validez de sub√°rboles'
  ]
};

export default function Page() {
  return <IntroPythonXom data={treeHeightExercise} />;
}
