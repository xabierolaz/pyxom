// Ejercicio de inserci√≥n en √°rbol binario de b√∫squeda (BST) para el m√≥dulo Trees
import IntroPythonXom from '@/components/IntroPythonXom';

// Orden recomendado para el m√≥dulo √Årboles (Mooc):
// 1. ej01_tree_basico (Nodo y preorden)
// 2. ej05_tree_inorden (Inorden)
// 3. ej06_tree_postorden (Postorden)
// 4. ej02_tree_altura (Altura)
// 5. ej04_tree_insercion (Inserci√≥n BST)
// 6. ej03_tree_busqueda (B√∫squeda BST)

const treeInsertExercise = {
  id: 'ej04_tree_insercion',
  title: 'Inserci√≥n BST - Validaci√≥n y Return Correctos',
  description: `En este ejercicio, aprender√°s a insertar valores en un BST evitando errores comunes de validaci√≥n y return.

### Instrucciones:
1. Implementa una funci√≥n llamada \`insertar_bst\` que reciba el nodo ra√≠z de un BST y un valor a insertar.
2. La funci√≥n debe insertar el valor en la posici√≥n correcta manteniendo las propiedades del BST.
3. Devuelve el nodo ra√≠z actualizado despu√©s de la inserci√≥n.

### ‚ö†Ô∏è Errores Comunes a Evitar:
1. **NO accedas a atributos de nodos nulos**: Verifica antes de acceder a \`.izq\` o \`.der\`
2. **Validaci√≥n local BST incorrecta**: Mant√©n las propiedades BST en cada inserci√≥n
3. **Falta el return**: SIEMPRE retorna el nodo ra√≠z actualizado
4. **L√≥gica de inserci√≥n incorrecta**: Usa comparaci√≥n correcta para decidir izq/der

### Ejemplo:
BST inicial:
\`\`\`
    10
   / \\
  5   15
\`\`\`
Insertar \`12\` ‚Üí Resultado:
\`\`\`
    10
   / \\
  5   15
     /
    12
\`\`\`

### üîç Consejos para Evitar Errores:
- **SIEMPRE** retorna \`Nodo(valor)\` cuando \`nodo is None\` (caso base)
- **NUNCA** modifiques nodos sin verificar que no sean None
- Mant√©n propiedades BST: valor < nodo.valor ‚Üí izquierda, valor > nodo.valor ‚Üí derecha
- **SIEMPRE** retorna el nodo ra√≠z actualizado

### Recursos Adicionales:
- [Documentaci√≥n sobre BST](https://en.wikipedia.org/wiki/Binary_search_tree)`,
  starterCode: `class Nodo:
    def __init__(self, valor):
        self.valor = valor
        self.izq = None
        self.der = None

def insertar_bst(nodo, valor):
    # ‚ö†Ô∏è ERROR COM√öN: Caso base - crear nuevo nodo cuando llegamos a None
    if nodo is None:
        return Nodo(valor)
    
    # ‚ö†Ô∏è ERROR COM√öN: Validaci√≥n BST correcta
    if valor < nodo.valor:
        # ‚ö†Ô∏è ERROR COM√öN: SIEMPRE asignar el resultado de la recursi√≥n
        nodo.izq = insertar_bst(nodo.izq, valor)
    elif valor > nodo.valor:
        # ‚ö†Ô∏è ERROR COM√öN: SIEMPRE asignar el resultado de la recursi√≥n
        nodo.der = insertar_bst(nodo.der, valor)
    # else: valor == nodo.valor (duplicado, no insertamos)
    
    # ‚ö†Ô∏è ERROR COM√öN: SIEMPRE retornar el nodo ra√≠z
    return nodo

# Ejemplo de uso:
# raiz = None
# raiz = insertar_bst(raiz, 10)
# raiz = insertar_bst(raiz, 5)
# raiz = insertar_bst(raiz, 15)`,
  tests: [
    { name: 'Insertar en √°rbol vac√≠o', input: '', expected: '10', points: 3, feedback: 'ERROR COM√öN #3: Debe crear un nuevo nodo cuando el √°rbol est√° vac√≠o y retornarlo.' },
    { name: 'Insertar a la izquierda', input: '', expected: '5 10', points: 3, feedback: 'ERROR COM√öN #2: valor < nodo.valor debe insertarse en sub√°rbol izquierdo.' },
    { name: 'Insertar a la derecha', input: '', expected: '10 15', points: 3, feedback: 'ERROR COM√öN #2: valor > nodo.valor debe insertarse en sub√°rbol derecho.' },
    { name: 'Mantener estructura BST', input: '', expected: '5 10 12 15', points: 3, feedback: 'ERROR COM√öN #2: Debe mantener propiedades BST despu√©s de m√∫ltiples inserciones.' },
    { name: 'Return correcto', input: '', expected: 'root_updated', points: 2, feedback: 'ERROR COM√öN #3: La funci√≥n debe retornar el nodo ra√≠z actualizado.' },
    { name: 'No duplicados', input: '', expected: '10', points: 1, feedback: 'ERROR COM√öN #4: No debe insertar valores duplicados en el BST.' }
  ],
  hints: [
    { id: 'h1', text: 'üö® ERROR #3: SIEMPRE retorna Nodo(valor) cuando nodo is None' },
    { id: 'h2', text: 'üö® ERROR #2: Usa valor < nodo.valor para decidir ir a izquierda' },
    { id: 'h3', text: 'üö® ERROR #3: ASIGNA el resultado: nodo.izq = insertar_bst(nodo.izq, valor)' },
    { id: 'h4', text: 'üö® ERROR #3: SIEMPRE retorna nodo al final de la funci√≥n' }
  ],
  efficiencyFeedback: 'La inserci√≥n BST debe ser O(h) donde h es la altura. Evita recorrer ramas innecesarias.',
  styleFeedback: 'Sigue PEP8: funciones en snake_case. Usa nombres descriptivos como insertar_bst.',
  suggestions: [
    'üîç ¬øRetornas Nodo(valor) cuando nodo is None?',
    'üîç ¬øAsignas el resultado de la recursi√≥n: nodo.izq = insertar_bst(...)?',
    'üîç ¬øUsas valor < nodo.valor para decidir ir a la izquierda?',
    'üîç ¬øTu funci√≥n SIEMPRE retorna el nodo ra√≠z al final?',
    'üîç ¬øManejas el caso de valores duplicados correctamente?'
  ],
  bestPractices: [
    '‚úÖ SIEMPRE retorna el nodo ra√≠z actualizado en funciones de inserci√≥n',
    '‚úÖ Asigna el resultado de llamadas recursivas a nodo.izq/nodo.der',
    '‚úÖ Mant√©n las propiedades BST en cada inserci√≥n',
    '‚úÖ Maneja correctamente el caso base (nodo None)',
    '‚úÖ Considera c√≥mo manejar valores duplicados',
    '‚úÖ Incluye docstrings que expliquen el comportamiento de retorno'
  ]
};

export default function Page() {
  return <IntroPythonXom data={treeInsertExercise} />;
}
