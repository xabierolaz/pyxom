'use client';

import IntroPythonXom from '@/components/IntroPythonXom';

const description = `# Verificador de Par√©ntesis - Pilas

Implementa un verificador de par√©ntesis balanceados usando el concepto de pilas (stacks). Aprender√°s a usar listas como pilas y la l√≥gica para verificar que los s√≠mbolos de apertura y cierre est√©n correctamente emparejados en expresiones matem√°ticas.

## ¬øQu√© vas a aprender?
- Implementar una pila usando listas de Python
- Entender el concepto LIFO en estructuras de datos
- Resolver problemas de balanceo usando pilas
- Manejar diferentes tipos de s√≠mbolos de agrupaci√≥n
- Aplicar algoritmos de validaci√≥n

## Instrucciones Detalladas

Implementa una clase **VerificadorParentesis** que:

1. **Tenga una pila interna** para almacenar los s√≠mbolos de apertura
2. **Soporte tres tipos de s√≠mbolos**: (), [], {}
3. **Implemente m√©todos b√°sicos de pila**: push, pop, is_empty, peek
4. **Verifique si una cadena tiene s√≠mbolos balanceados**
5. **Maneje casos especiales** como cadenas vac√≠as o sin s√≠mbolos

### Reglas de Balanceo:
- Cada s√≠mbolo de apertura debe tener su correspondiente cierre
- Los s√≠mbolos deben cerrarse en el orden correcto
- No puede haber s√≠mbolos de cierre sin apertura previa

‚ö†Ô∏è **Errores Comunes a Evitar:**
- No verificar si la pila est√° vac√≠a antes de hacer pop()
- No considerar todos los tipos de s√≠mbolos
- No manejar el caso de cadena vac√≠a
- Olvidar que al final la pila debe estar vac√≠a

## C√≥digo Inicial

\`\`\`python
class VerificadorParentesis:
    def __init__(self):
        # Inicializar la pila
        pass
    
    def push(self, elemento):
        # Agregar elemento al tope de la pila
        pass
    
    def pop(self):
        # Remover y retornar el elemento del tope
        pass
    
    def is_empty(self):
        # Verificar si la pila est√° vac√≠a
        pass
    
    def peek(self):
        # Ver el elemento del tope sin removerlo
        pass
    
    def es_par_valido(self, apertura, cierre):
        # Verificar si los s√≠mbolos forman un par v√°lido
        pass
    
    def verificar_balanceados(self, cadena):
        # Verificar si los s√≠mbolos est√°n balanceados
        pass

# Crear instancia y probar
verificador = VerificadorParentesis()

# Pruebas b√°sicas
print("Prueba 1:", verificador.verificar_balanceados("()"))  # True
print("Prueba 2:", verificador.verificar_balanceados("([)]"))  # False
print("Prueba 3:", verificador.verificar_balanceados("{[()]}"))  # True
\`\`\`

## Casos de Prueba

### Caso 1: Par√©ntesis Simples
\`\`\`python
resultado = verificador.verificar_balanceados("()")
print(f"'()' est√° balanceado: {resultado}")  # Debe ser True
\`\`\`

### Caso 2: M√∫ltiples Tipos
\`\`\`python
resultado = verificador.verificar_balanceados("([{}])")
print(f"'([{}])' est√° balanceado: {resultado}")  # Debe ser True
\`\`\`

### Caso 3: Orden Incorrecto
\`\`\`python
resultado = verificador.verificar_balanceados("([)]")
print(f"'([)]' est√° balanceado: {resultado}")  # Debe ser False
\`\`\`

### Caso 4: Cadena Vac√≠a
\`\`\`python
resultado = verificador.verificar_balanceados("")
print(f"Cadena vac√≠a est√° balanceada: {resultado}")  # Debe ser True
\`\`\`

### Caso 5: Solo Texto
\`\`\`python
resultado = verificador.verificar_balanceados("hola mundo")
print(f"'hola mundo' est√° balanceado: {resultado}")  # Debe ser True
\`\`\`

## üí° Pistas Progresivas

### Pista 1: Estructura de la Pila
Usa una lista de Python como pila. Recuerda que \`append()\` es push y \`pop()\` es pop.

### Pista 2: Mapeo de S√≠mbolos
Crea un diccionario que mapee cada s√≠mbolo de cierre con su apertura:
\`\`\`python
pares = {')': '(', ']': '[', '}': '{'}
\`\`\`

### Pista 3: Algoritmo Principal
1. Recorre cada car√°cter de la cadena
2. Si es s√≠mbolo de apertura, agr√©galo a la pila
3. Si es s√≠mbolo de cierre, verifica que coincida con el tope de la pila
4. Al final, la pila debe estar vac√≠a

### Pista 4: Manejo de Errores
Siempre verifica si la pila est√° vac√≠a antes de hacer pop() para evitar excepciones.

## üèÜ Mejores Pr√°cticas

1. **Separar Responsabilidades**: La clase debe manejar tanto la pila como la verificaci√≥n
2. **Validar Entrada**: Manejar casos especiales como cadenas vac√≠as
3. **Usar Nombres Descriptivos**: Los m√©todos deben explicar claramente su prop√≥sito
4. **Documentar el Algoritmo**: Comenta los pasos clave del proceso de verificaci√≥n
5. **Optimizar**: El algoritmo debe ser O(n) en tiempo y espacio

## üéØ Extensiones Opcionales

1. **Contador de Errores**: Reportar cu√°ntos s√≠mbolos est√°n desbalanceados
2. **Posici√≥n del Error**: Indicar d√≥nde ocurre el primer error
3. **Soporte para M√°s S√≠mbolos**: A√±adir soporte para <> u otros s√≠mbolos
4. **Modo Detallado**: Mostrar el estado de la pila en cada paso`;

const exerciseData = {
  id: 'ej06_verificador_parentesis',
  title: 'Verificador de Par√©ntesis - Pilas',
  description: `Implementa un verificador de expresiones matem√°ticas que valide el balanceo de par√©ntesis, corchetes y llaves usando una pila (stack) como estructura de datos.

### Requisitos:
1. Los s√≠mbolos son: (), [], {}
2. Cada s√≠mbolo de apertura debe tener su correspondiente cierre en el orden correcto
3. Las expresiones vac√≠as o sin s√≠mbolos son v√°lidas

### Ejemplo:
\`\`\`python
verificador = VerificadorParentesis()
print(verificador.verificar_balanceados("([{}])"))  # True
print(verificador.verificar_balanceados("([)]"))    # False
\`\`\``,
  starterCode: `class VerificadorParentesis:
    def __init__(self):
        """
        Inicializa el verificador con una pila vac√≠a para almacenar s√≠mbolos.
        """
        pass

    def verificar_balanceados(self, cadena: str) -> bool:
        """
        Verifica si los s√≠mbolos () [] {} en una cadena est√°n correctamente balanceados.
        
        Args:
            cadena (str): La expresi√≥n a verificar
            
        Returns:
            bool: True si los s√≠mbolos est√°n balanceados, False en caso contrario
        """
        pass
`,
  tests: [
    {
      name: "par√©ntesis simples",
      input: 'verificador = VerificadorParentesis(); verificador.verificar_balanceados("()")',
      expected: "True",
      points: 1
    },
    {
      name: "s√≠mbolos anidados",
      input: 'verificador = VerificadorParentesis(); verificador.verificar_balanceados("([{}])")',
      expected: "True", 
      points: 2
    },
    {
      name: "orden incorrecto",
      input: 'verificador = VerificadorParentesis(); verificador.verificar_balanceados("([)]")',
      expected: "False",
      points: 2
    },
    {
      name: "cadena vac√≠a",
      input: 'verificador = VerificadorParentesis(); verificador.verificar_balanceados("")',
      expected: "True",
      points: 1
    },
    {
      name: "texto plano",
      input: 'verificador = VerificadorParentesis(); verificador.verificar_balanceados("hola mundo")',
      expected: "True",
      points: 1
    }
  ],
  hints: [
    {
      id: "h1",
      text: "Usa una lista de Python como pila. append() es push y pop() es pop",
      type: "concept"
    },
    {
      id: "h2", 
      text: "Usa un diccionario para mapear pares: {')':'(', ']':'[', '}':'{'}", 
      type: "implementation"
    },
    {
      id: "h3",
      text: "Cada s√≠mbolo de apertura va a la pila. Cada cierre debe corresponder con el √∫ltimo abierto",
      type: "strategy"
    }
  ]
};

export default function VerificadorParentesis() {
  return <IntroPythonXom data={exerciseData} />;
}
