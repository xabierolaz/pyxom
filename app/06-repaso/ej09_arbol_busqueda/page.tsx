'use client';

import React from 'react';
import IntroPythonXom from '@/components/IntroPythonXom';

export default function ArbolBusqueda() {    const description = `Implementa un √Årbol Binario de B√∫squeda (BST) con operaciones fundamentales. Aprender√°s sobre estructuras jer√°rquicas, recursi√≥n, y c√≥mo mantener datos ordenados de forma eficiente con b√∫squeda logar√≠tmica.

- **Recorridos √∫tiles**: In-order da elementos ordenados
- **Operaciones din√°micas**: Inserci√≥n y eliminaci√≥n flexibles

### Tipos de Recorrido:
- **In-order** (izquierda, ra√≠z, derecha): Elementos en orden ascendente
- **Pre-order** (ra√≠z, izquierda, derecha): √ötil para copiar el √°rbol
- **Post-order** (izquierda, derecha, ra√≠z): √ötil para eliminar el √°rbol

## ¬øQu√© vas a aprender?
- Implementar estructuras de datos recursivas
- Entender algoritmos de b√∫squeda eficientes
- Manejar operaciones de inserci√≥n y eliminaci√≥n en √°rboles
- Implementar diferentes tipos de recorridos
- Aplicar conceptos de recursi√≥n en estructuras complejas

## Instrucciones Detalladas

Implementa un **ArbolBinarioBusqueda** con las siguientes funcionalidades:

1. **Clase NodoArbol**: Represente un nodo con valor y referencias a hijos
2. **Inserci√≥n**: Agregar elementos manteniendo la propiedad BST
3. **B√∫squeda**: Encontrar elementos eficientemente
4. **Eliminaci√≥n**: Remover elementos preservando la estructura
5. **Recorridos**: Implementar in-order, pre-order, y post-order
6. **Utilidades**: Altura, tama√±o, m√≠nimo, m√°ximo

### Operaciones Requeridas:
- \`insertar(valor)\`: Agregar nuevo valor
- \`buscar(valor)\`: Verificar si existe un valor
- \`eliminar(valor)\`: Remover valor del √°rbol
- \`recorrido_inorder()\`: Recorrido en orden
- \`recorrido_preorder()\`: Recorrido pre-orden
- \`recorrido_postorder()\`: Recorrido post-orden
- \`altura()\`: Calcular altura del √°rbol
- \`minimo()\` y \`maximo()\`: Encontrar valores extremos

‚ö†Ô∏è **Errores Comunes a Evitar:**
- No mantener la propiedad BST al insertar
- Manejo incorrecto de la eliminaci√≥n (especialmente nodos con dos hijos)
- Recursi√≥n infinita por referencias mal configuradas
- No considerar el caso del √°rbol vac√≠o
- Confundir los diferentes tipos de recorrido

## C√≥digo Inicial

\`\`\`python
class NodoArbol:
    def __init__(self, valor):
        # Inicializar nodo con valor y sin hijos
        pass
    
    def __str__(self):
        # Representaci√≥n del nodo
        pass

class ArbolBinarioBusqueda:
    def __init__(self):
        # Inicializar √°rbol vac√≠o
        pass
    
    def insertar(self, valor):
        # Insertar valor manteniendo propiedad BST
        pass
    
    def _insertar_recursivo(self, nodo, valor):
        # M√©todo auxiliar recursivo para inserci√≥n
        pass
    
    def buscar(self, valor):
        # Buscar valor en el √°rbol
        pass
    
    def _buscar_recursivo(self, nodo, valor):
        # M√©todo auxiliar recursivo para b√∫squeda
        pass
    
    def eliminar(self, valor):
        # Eliminar valor del √°rbol
        pass
    
    def _eliminar_recursivo(self, nodo, valor):
        # M√©todo auxiliar recursivo para eliminaci√≥n
        pass
    
    def _encontrar_minimo(self, nodo):
        # Encontrar el nodo con valor m√≠nimo
        pass
    
    def recorrido_inorder(self):
        # Recorrido en orden (izquierda, ra√≠z, derecha)
        pass
    
    def _inorder_recursivo(self, nodo, resultado):
        # M√©todo auxiliar para recorrido in-order
        pass
    
    def recorrido_preorder(self):
        # Recorrido pre-orden (ra√≠z, izquierda, derecha)
        pass
    
    def recorrido_postorder(self):
        # Recorrido post-orden (izquierda, derecha, ra√≠z)
        pass
    
    def altura(self):
        # Calcular altura del √°rbol
        pass
    
    def _altura_recursiva(self, nodo):
        # M√©todo auxiliar recursivo para altura
        pass
    
    def minimo(self):
        # Encontrar valor m√≠nimo del √°rbol
        pass
    
    def maximo(self):
        # Encontrar valor m√°ximo del √°rbol
        pass
    
    def esta_vacio(self):
        # Verificar si el √°rbol est√° vac√≠o
        pass
    
    def mostrar_estructura(self, nodo=None, nivel=0, prefijo="Ra√≠z: "):
        # Mostrar estructura visual del √°rbol
        pass

# Ejemplo de uso
arbol = ArbolBinarioBusqueda()

# Insertar elementos
valores = [50, 30, 70, 20, 40, 60, 80]
for valor in valores:
    arbol.insertar(valor)

print("√Årbol creado con valores:", valores)
arbol.mostrar_estructura()

print("Recorrido in-order:", arbol.recorrido_inorder())
\`\`\`

## Casos de Prueba

### Caso 1: Inserci√≥n y Estructura
\`\`\`python
arbol = ArbolBinarioBusqueda()
valores = [50, 30, 70, 20, 40, 60, 80, 10, 25, 35, 45]

for valor in valores:
    arbol.insertar(valor)
    
print("Estructura del √°rbol:")
arbol.mostrar_estructura()

print("Recorrido in-order (debe estar ordenado):")
print(arbol.recorrido_inorder())  # [10, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80]
\`\`\`

### Caso 2: B√∫squedas
\`\`\`python
print("B√∫squedas:")
print(f"¬øExiste 40? {arbol.buscar(40)}")    # True
print(f"¬øExiste 100? {arbol.buscar(100)}")  # False
print(f"¬øExiste 10? {arbol.buscar(10)}")    # True
print(f"¬øExiste 5? {arbol.buscar(5)}")      # False
\`\`\`

### Caso 3: Valores Extremos
\`\`\`python
print("Valores extremos:")
print(f"M√≠nimo: {arbol.minimo()}")  # 10
print(f"M√°ximo: {arbol.maximo()}")  # 80
print(f"Altura: {arbol.altura()}")  # Depende de la estructura
\`\`\`

### Caso 4: Diferentes Recorridos
\`\`\`python
print("Recorridos:")
print(f"In-order:   {arbol.recorrido_inorder()}")
print(f"Pre-order:  {arbol.recorrido_preorder()}")
print(f"Post-order: {arbol.recorrido_postorder()}")
\`\`\`

### Caso 5: Eliminaciones
\`\`\`python
print("\\nAntes de eliminar 30:")
arbol.mostrar_estructura()

arbol.eliminar(30)  # Nodo con dos hijos
print("\\nDespu√©s de eliminar 30:")
arbol.mostrar_estructura()

print("Recorrido in-order despu√©s de eliminaci√≥n:")
print(arbol.recorrido_inorder())
\`\`\`

### Caso 6: √Årbol Vac√≠o
\`\`\`python
arbol_vacio = ArbolBinarioBusqueda()
print(f"√Årbol vac√≠o: {arbol_vacio.esta_vacio()}")  # True
print(f"Buscar en √°rbol vac√≠o: {arbol_vacio.buscar(10)}")  # False
print(f"Altura de √°rbol vac√≠o: {arbol_vacio.altura()}")  # 0
\`\`\`

## üí° Pistas Progresivas

### Pista 1: Estructura del Nodo
\`\`\`python
class NodoArbol:
    def __init__(self, valor):
        self.valor = valor
        self.izquierdo = None
        self.derecho = None
\`\`\`

### Pista 2: Inserci√≥n Recursiva
Para insertar:
1. Si el √°rbol est√° vac√≠o, crear ra√≠z
2. Si valor < nodo.valor, ir a la izquierda
3. Si valor > nodo.valor, ir a la derecha
4. Si el hijo es None, crear nuevo nodo

### Pista 3: Recorrido In-Order
\`\`\`python
def _inorder_recursivo(self, nodo, resultado):
    if nodo is not None:
        self._inorder_recursivo(nodo.izquierdo, resultado)
        resultado.append(nodo.valor)
        self._inorder_recursivo(nodo.derecho, resultado)
\`\`\`

### Pista 4: Eliminaci√≥n con Dos Hijos
Cuando eliminas un nodo con dos hijos:
1. Encuentra el sucesor in-order (m√≠nimo del sub√°rbol derecho)
2. Reemplaza el valor del nodo a eliminar con el valor del sucesor
3. Elimina el sucesor (que tendr√° como m√°ximo un hijo)

## üèÜ Mejores Pr√°cticas

1. **M√©todos Auxiliares**: Usar m√©todos recursivos privados para implementaci√≥n
2. **Casos Base**: Siempre manejar el caso de nodo None
3. **Validaci√≥n**: Verificar par√°metros antes de operaciones
4. **Documentaci√≥n**: Explicar la l√≥gica recursiva claramente
5. **Eficiencia**: Aprovechar la propiedad BST para b√∫squedas eficientes

## üéØ Extensiones Opcionales

1. **BST Balanceado**: Implementar rotaciones para mantener balance
2. **√Årbol AVL**: Auto-balanceo con factores de balance
3. **Operaciones de Rango**: Encontrar elementos en un rango de valores
4. **Serializaci√≥n**: Convertir √°rbol a string y viceversa
5. **Validaci√≥n BST**: Verificar que un √°rbol mantiene la propiedad BST

## üìä Ejemplo de Salida Esperada

\`\`\`
=== √ÅRBOL BINARIO DE B√öSQUEDA ===

Insertando valores: [50, 30, 70, 20, 40, 60, 80]

Estructura del √°rbol:
Ra√≠z: 50
‚îú‚îÄ‚îÄ Izq: 30
‚îÇ   ‚îú‚îÄ‚îÄ Izq: 20
‚îÇ   ‚îî‚îÄ‚îÄ Der: 40
‚îî‚îÄ‚îÄ Der: 70
    ‚îú‚îÄ‚îÄ Izq: 60
    ‚îî‚îÄ‚îÄ Der: 80

Recorridos:
In-order:   [20, 30, 40, 50, 60, 70, 80]
Pre-order:  [50, 30, 20, 40, 70, 60, 80]
Post-order: [20, 40, 30, 60, 80, 70, 50]

Estad√≠sticas:
Altura: 3
M√≠nimo: 20
M√°ximo: 80

B√∫squedas:
¬øExiste 40? True
¬øExiste 100? False
\`\`\`

## üß† Complejidad Temporal

**Caso Promedio (√°rbol balanceado):**
- **B√∫squeda**: O(log n)
- **Inserci√≥n**: O(log n)
- **Eliminaci√≥n**: O(log n)

**Caso Peor (√°rbol degenerado - como lista enlazada):**
- **Todas las operaciones**: O(n)

**Espacio:** O(n) para almacenar n nodos
`;

  const exerciseData = {
    id: 'ej09_arbol_busqueda',
    title: 'Ejercicio 9: √Årbol Binario de B√∫squeda',
    description,
    starterCode: `class NodoArbol:
    def __init__(self, valor):
        # TODO: Inicializar valor, izquierdo y derecho
        pass

class ArbolBinarioBusqueda:
    def __init__(self):
        # TODO: Inicializar ra√≠z como None
        pass

    def insertar(self, valor):
        # TODO: Implementar inserci√≥n manteniendo propiedad BST
        pass

    def _insertar_recursivo(self, nodo, valor):
        # TODO: M√©todo auxiliar recursivo
        pass`,
    tests: [],
    hints: []
  };

  return <IntroPythonXom data={exerciseData} />;
}
