'use client';

import IntroPythonXom from '@/components/IntroPythonXom';
import type { ExerciseData } from '@/types/types';

const listaEnlazadaExerciseData: ExerciseData = {
  id: 'ej08_lista_enlazada',
  title: 'Lista Enlazada - ImplementaciÃ³n desde Cero',
  description: `# Lista Enlazada

Implementa una lista enlazada simple desde cero. Esta estructura de datos es fundamental para entender cÃ³mo funcionan las referencias y la memoria dinÃ¡mica en programaciÃ³n.

## Tu tarea

1. Crear una clase \`Node\` para los elementos individuales
2. Implementar la clase \`LinkedList\` con operaciones bÃ¡sicas
3. Manejar correctamente las referencias entre nodos
4. Implementar mÃ©todos de inserciÃ³n y eliminaciÃ³n

## Requisitos

### Clase Node:
- Dato almacenado
- Referencia al siguiente nodo

### Clase LinkedList:
- Referencia al primer nodo (head)
- MÃ©todos para insertar y eliminar
- MÃ©todos de utilidad (tamaÃ±o, estÃ¡ vacÃ­a, etc.)

## Operaciones a implementar

- Insertar al inicio y final
- Eliminar por valor y posiciÃ³n
- Buscar elementos
- Obtener tamaÃ±o de la lista

## Ejemplo de uso

\`\`\`python
linked_list = LinkedList()
linked_list.insert_at_beginning(1)
linked_list.insert_at_end(2)
linked_list.insert_at_end(3)
print("Lista actual:")
linked_list.display()
\`\`\``,
  starterCode: `class Node:
    def __init__(self, data):
        """
        Inicializa un nodo con su dato y sin referencia al siguiente
        
        Args:
            data: El dato a almacenar en el nodo
        """
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        """Inicializa una lista enlazada vacÃ­a"""
        self.head = None
    
    def insert_at_beginning(self, data):
        """
        Inserta un nuevo nodo al inicio de la lista
        
        Args:
            data: El dato a insertar
        """
        # Implementa la inserciÃ³n al inicio
        pass
    
    def insert_at_end(self, data):
        """
        Inserta un nuevo nodo al final de la lista
        
        Args:
            data: El dato a insertar
        """
        # Implementa la inserciÃ³n al final
        pass
    
    def delete_value(self, value):
        """
        Elimina el primer nodo con el valor dado
        
        Args:
            value: El valor a eliminar
        
        Returns:
            bool: True si se eliminÃ³ algÃºn nodo, False si no se encontrÃ³
        """
        # Implementa la eliminaciÃ³n por valor
        pass
    
    def search(self, value):
        """
        Busca un valor en la lista
        
        Args:
            value: El valor a buscar
            
        Returns:
            bool: True si el valor estÃ¡ en la lista, False si no
        """
        # Implementa la bÃºsqueda
        pass
    
    def display(self):
        """Muestra todos los elementos de la lista"""
        # Implementa la visualizaciÃ³n
        pass

# CÃ³digo de prueba
linked_list = LinkedList()
linked_list.insert_at_beginning(1)
linked_list.insert_at_end(2)
linked_list.insert_at_end(3)
print("Lista actual:")
linked_list.display()`,
  tests: [
    {
      name: 'Test Lista VacÃ­a',
      input: 'linked_list = LinkedList()\nprint(linked_list.head is None)',
      expected: 'True',
      points: 1,
      feedback: 'Una lista reciÃ©n creada debe tener head = None'
    },
    {
      name: 'Test Insertar al Inicio',
      input: 'linked_list = LinkedList()\nlinked_list.insert_at_beginning(5)\nprint(linked_list.head.data)',
      expected: '5',
      points: 2,
      feedback: 'La inserciÃ³n al inicio debe crear un nuevo nodo como head'
    },
    {
      name: 'Test Insertar al Final',
      input: 'linked_list = LinkedList()\nlinked_list.insert_at_beginning(1)\nlinked_list.insert_at_end(2)\ncurrent = linked_list.head\nwhile current.next: current = current.next\nprint(current.data)',
      expected: '2',
      points: 2,
      feedback: 'La inserciÃ³n al final debe aÃ±adir el nodo como Ãºltimo elemento'
    },
    {
      name: 'Test Buscar Elemento Presente',
      input: 'linked_list = LinkedList()\nlinked_list.insert_at_beginning(1)\nlinked_list.insert_at_end(2)\nprint(linked_list.search(2))',
      expected: 'True',
      points: 1,
      feedback: 'La bÃºsqueda debe encontrar elementos presentes en la lista'
    },
    {
      name: 'Test Buscar Elemento Ausente',
      input: 'linked_list = LinkedList()\nlinked_list.insert_at_beginning(1)\nlinked_list.insert_at_end(2)\nprint(linked_list.search(3))',
      expected: 'False',
      points: 1,
      feedback: 'La bÃºsqueda debe devolver False para elementos ausentes'
    },
    {
      name: 'Test Eliminar Valor',
      input: 'linked_list = LinkedList()\nlinked_list.insert_at_beginning(1)\nlinked_list.insert_at_end(2)\nlinked_list.insert_at_end(3)\nlinked_list.delete_value(2)\ncurrent = linked_list.head\nnext_val = current.next.data if current and current.next else None\nprint(next_val)',
      expected: '3',
      points: 3,
      feedback: 'La eliminaciÃ³n debe mantener la estructura de la lista'
    }
  ],
  hints: [
    {
      id: 'h1',
      text: 'ğŸ’¡ Cada nodo debe tener un dato y una referencia al siguiente nodo'
    },
    {
      id: 'h2',
      text: 'ğŸ’¡ Al insertar al inicio, el nuevo nodo debe apuntar al antiguo head'
    },
    {
      id: 'h3',
      text: 'ğŸ’¡ Para insertar al final, debes recorrer la lista hasta el Ãºltimo nodo'
    },
    {
      id: 'h4',
      text: 'ğŸ’¡ Al eliminar, considera casos especiales: lista vacÃ­a, eliminar el head, etc.'
    }
  ],
  maxPoints: 10,
  globalTimeoutMs: 5000,
  efficiencyFeedback: 'MantÃ©n un buen rendimiento en operaciones bÃ¡sicas.',
  styleFeedback: 'Usa nombres descriptivos y sigue las convenciones de Python.',
  suggestions: [
    'Â¿Manejas correctamente los casos especiales?',
    'Â¿Las referencias entre nodos se mantienen correctamente?'
  ],
  bestPractices: [
    'Documenta tus mÃ©todos con docstrings',
    'Maneja casos especiales como lista vacÃ­a'
  ]
};

export default function ListaEnlazadaPage() {
  return <IntroPythonXom data={listaEnlazadaExerciseData} />;
}
