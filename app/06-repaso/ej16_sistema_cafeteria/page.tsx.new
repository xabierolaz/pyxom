import IntroPythonXom from '@/components/IntroPythonXom';

const sistemaCafeteriaExercise = {
  id: 'ej16_sistema_cafeteria',
  title: 'Sistema de Cafeter√≠a (Proyecto Final Integrador)',  
  description: `Proyecto final integrador que combina todos los conceptos del curso. Desarrollar√°s un sistema completo de gesti√≥n para una cafeter√≠a universitaria incluyendo POO, estructuras de datos, manejo de archivos, algoritmos, validaciones y c√°lculos.

**üèóÔ∏è Parte 1: Entidades Principales**
- Clase \`Producto\` (nombre, precio, categor√≠a, ingredientes, stock)
- Clase \`Pedido\` (items, cliente, total, estado, timestamp)  
- Clase \`Cliente\` (ID, nombre, tipo, historial, descuentos)
- Clase \`Cafeteria\` (gesti√≥n central del sistema)

**üí∞ Parte 2: Sistema de Ventas**
- Cat√°logo de productos (bebidas, comidas, snacks, postres)
- Carrito de compras con modificaciones
- C√°lculo de totales con descuentos e impuestos
- M√©todos de pago y cambio

**üìä Parte 3: Gesti√≥n de Inventario**
- Control de stock en tiempo real
- Alertas de productos agotados
- Reabastecimiento autom√°tico
- Costos y m√°rgenes de ganancia

**üë• Parte 4: Sistema de Clientes**
- Registro de clientes (estudiantes, profesores, visitantes)
- Programa de fidelidad con puntos
- Descuentos por tipo de cliente
- Historial de compras

**‚è∞ Parte 5: Gesti√≥n de Pedidos**
- Cola de pedidos con prioridades
- Tiempos de preparaci√≥n estimados
- Estados: pendiente, preparando, listo, entregado
- Sistema de turnos y notificaciones

**üìà Parte 6: Reportes y An√°lisis**
- Ventas diarias, semanales, mensuales
- Productos m√°s vendidos
- Ingresos y ganancias
- An√°lisis de clientes frecuentes
- Exportaci√≥n a CSV/JSON

**üíæ Parte 7: Persistencia**
- Guardar/cargar datos del sistema
- Backup autom√°tico de transacciones
- Configuraci√≥n de la cafeter√≠a
- Logs de actividad`,

  starterCode: `# Proyecto Final: Sistema de Cafeter√≠a
# Implementa un sistema completo para gestionar una cafeter√≠a universitaria
# Este es un esqueleto b√°sico, debes expandirlo con todas las funcionalidades
# descritas en las especificaciones

import json
import csv
from datetime import datetime, timedelta
from collections import defaultdict

class Producto:
    def __init__(self, codigo, nombre, precio, categoria, ingredientes=None, stock=0):
        # TODO: Implementar inicializaci√≥n de producto
        pass
        
    def __str__(self):
        # TODO: Representaci√≥n del producto
        pass
        
    def actualizar_stock(self, cantidad):
        # TODO: Aumentar o disminuir stock
        pass
        
    def esta_disponible(self, cantidad=1):
        # TODO: Verificar si hay stock suficiente
        pass

class Cliente:
    def __init__(self, id, nombre, tipo="visitante"):
        # TODO: Implementar inicializaci√≥n de cliente
        pass
        
    def aplicar_descuento(self, subtotal):
        # TODO: Calcular descuento seg√∫n tipo de cliente
        pass
        
    def agregar_puntos(self, puntos):
        # TODO: Agregar puntos de fidelidad
        pass
        
    def canjear_puntos(self, puntos):
        # TODO: Canjear puntos por descuentos
        pass

class Pedido:
    def __init__(self, cliente, items=None):
        # TODO: Implementar inicializaci√≥n de pedido
        pass
        
    def agregar_item(self, producto, cantidad=1):
        # TODO: Agregar producto al pedido
        pass
        
    def quitar_item(self, producto):
        # TODO: Quitar producto del pedido
        pass
        
    def calcular_total(self):
        # TODO: Calcular total con descuentos
        pass
        
    def procesar_pago(self, metodo_pago, monto):
        # TODO: Procesar pago y calcular cambio
        pass
        
    def cambiar_estado(self, nuevo_estado):
        # TODO: Actualizar estado del pedido
        pass

class Cafeteria:
    def __init__(self, nombre):
        # TODO: Implementar inicializaci√≥n del sistema
        pass
        
    def agregar_producto(self, producto):
        # TODO: Agregar producto al cat√°logo
        pass
        
    def registrar_cliente(self, cliente):
        # TODO: Registrar nuevo cliente
        pass
        
    def crear_pedido(self, cliente_id):
        # TODO: Crear nuevo pedido
        pass
        
    def atender_siguiente_pedido(self):
        # TODO: Atender pedido siguiente en la cola
        pass
        
    def buscar_producto(self, criterio):
        # TODO: Buscar producto por nombre, c√≥digo o categor√≠a
        pass
        
    def generar_reporte_ventas(self, periodo="diario"):
        # TODO: Generar reporte de ventas
        pass
        
    def guardar_datos(self, archivo):
        # TODO: Guardar estado del sistema
        pass
        
    def cargar_datos(self, archivo):
        # TODO: Cargar estado del sistema
        pass

# C√≥digo de prueba
cafeteria = Cafeteria("Caf√©XOM")

# Crear productos
cafe = Producto("B001", "Caf√© Americano", 2.50, "bebidas", ["caf√©", "agua"], 100)
sandwich = Producto("C001", "Sandwich Vegetal", 4.75, "comidas", ["pan", "lechuga", "tomate"], 20)

# Registrar productos
cafeteria.agregar_producto(cafe)
cafeteria.agregar_producto(sandwich)

# Registrar clientes
cliente1 = Cliente("E001", "Ana Garc√≠a", "estudiante")
cafeteria.registrar_cliente(cliente1)

# Crear pedido
pedido = cafeteria.crear_pedido("E001")
pedido.agregar_item(cafe, 2)
pedido.agregar_item(sandwich)

# Procesar pedido
total = pedido.calcular_total()
print(f"Total a pagar: ${total:.2f}")
pedido.procesar_pago("efectivo", 10.00)

# Cambiar estado
pedido.cambiar_estado("preparando")`,
  tests: [],
  hints: []
};

export default function SistemaCafeteria() {
  return <IntroPythonXom data={sistemaCafeteriaExercise} />;
}
