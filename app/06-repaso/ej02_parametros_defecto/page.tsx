// Ejercicio 2: Par√°metros por Defecto - Debugging de errores comunes
import IntroPythonXom from '@/components/IntroPythonXom';

const parametrosDefectoExercise = {
  id: 'ej02_parametros_defecto',
  title: 'Par√°metros por Defecto - Debugging de Errores Comunes',
  description: 'En este ejercicio aprender√°s a evitar uno de los errores m√°s comunes en Python: usar tipos mutables como listas vac√≠as como par√°metros por defecto. Implementar√°s una funci√≥n que gestiona tareas de manera correcta, evitando que las listas se compartan entre llamadas diferentes.',
  starterCode: `# Ejercicio: Par√°metros por Defecto Seguros
# Implementa una funci√≥n que gestiona tareas evitando el problema de mutabilidad

def agregar_tarea_correcta(tarea, lista_tareas=None):
    """
    Versi√≥n corregida que evita el problema de par√°metros mutables por defecto.
    
    Args:
        tarea (str): La tarea a agregar
        lista_tareas (list, optional): Lista de tareas existente. Si es None, se crea una nueva.
    
    Returns:
        list: Lista de tareas actualizada
    """
    # Tu c√≥digo aqu√≠
    # Debes asegurarte de que no se comparta la misma lista entre diferentes llamadas
    
    
    

# Demostraci√≥n de la diferencia (NO modifiques esto)
def agregar_tarea_incorrecta(tarea, lista_tareas=[]):
    """Versi√≥n con el bug para comparar"""
    lista_tareas.append(tarea)
    return lista_tareas

# Prueba tu funci√≥n
print("Funci√≥n CORRECTA:")
print(agregar_tarea_correcta("Estudiar"))    
print(agregar_tarea_correcta("Ejercicio"))   

print("\\nFunci√≥n INCORRECTA (para comparar):")
print(agregar_tarea_incorrecta("Estudiar"))     
print(agregar_tarea_incorrecta("Ejercicio"))`,
  tests: [
    {
      name: "Primera llamada independiente",
      input: `
result = agregar_tarea_correcta("Estudiar")
print(result)
      `,
      expected: "['Estudiar']",
      hidden: false
    },
    {
      name: "Segunda llamada independiente",
      input: `
agregar_tarea_correcta("Estudiar")
result = agregar_tarea_correcta("Ejercicio")
print(result)
      `,
      expected: "['Ejercicio']",
      hidden: false
    },
    {
      name: "Con lista existente",
      input: `
lista_inicial = ["Tarea1"]
result = agregar_tarea_correcta("Tarea2", lista_inicial)
print(result)
      `,
      expected: "['Tarea1', 'Tarea2']",
      hidden: false
    }
  ],
  hints: [
    { id: 'hint1', text: 'üîç ¬øEst√°s usando None como valor por defecto en lugar de []?' },
    { id: 'hint2', text: 'üí° Recuerda crear una nueva lista vac√≠a cuando lista_tareas sea None' },
    { id: 'hint3', text: '‚ö†Ô∏è Los objetos mutables como listas se crean UNA sola vez al definir la funci√≥n' },
    { id: 'hint4', text: '‚úÖ El patr√≥n correcto es: par√°metro=None, luego if par√°metro is None: par√°metro = []' }
  ],

  suggestions: [
    'Usa None como valor por defecto para par√°metros que ser√≠an mutables',
    'Siempre crea objetos mutables DENTRO de la funci√≥n, no como par√°metros por defecto',
    'Este problema se conoce como "Mutable Default Argument Trap"'
  ],

  bestPractices: [
    '‚úÖ NUNCA uses tipos mutables ([], {}, set()) como valores por defecto',
    '‚úÖ USA None como valor por defecto y crea el objeto dentro de la funci√≥n',
    '‚úÖ Este patr√≥n es est√°ndar en c√≥digo Python profesional',
    '‚úÖ Documenta claramente cuando un par√°metro puede ser None'
  ]
};

export default function ParametrosDefecto() {
  return <IntroPythonXom data={parametrosDefectoExercise} />;
}
